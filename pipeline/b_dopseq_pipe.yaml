# Processing of sequencing data of DOP-PCR libraries from isolated chromosomes 
# Usage: dopseq_pipe.py [-d] dopseq_pipe.config
# Option: -d - dry run: print out commands and exit
# Output files are written to current folder. For details see comments below.
# Expects all executables in ../exec/ relative to b_dopseq_pipe.py

### Assignable parameters

# sample name - used as prefix for output files. Allowed characters - letters, digits, underscore.
sample: VVUB

# path to file with forward reads
fastq_F_file: ../examples/test.F.fastq
# path to file with reverse reads, comment out in case of single-end reads
fastq_R_file: ../examples/test.R.fastq 

# genomes
# path to fasta file of target genome
target_genome: /genome/canFam3/canFam3.masked.fa 
# Optional: path to fasta file of contamination genome (human in our case)
contam_genome: /genome/hg19/hg19.fa 
# note that for bowtie2 and bwa index files are expected in the same folder with proper basenames: 
# e.g. for canFam3.masked.fasta, canFam3 and canFam3.masked.fasta are valid

# read trimming, includes Illumina adapter removal
cutadapt_path: cutadapt # do not use '~' in path
# amplification protocol - used to remove specific primers. Possible values: dop, wga, none.
ampl: wga 
# additional parameters for cutadapt specified as quoted string
cutadapt_args: "--trim-n --minimum-length 20" 
# for WGA you may want to increase error toleance with -e 0.2-0.3

# read mapping
# Aligner to use. Possible values: bt2 (for bowtie2), bwa, bbm (for bbmap)
aln: bwa 
bowtie2_path: bowtie2 # do not use '~' in path
# Additional parameters for bowtie2 specified as quoted string
bowtie2_args: "-p 1 --very-sensitive-local" 
bwa_path: bwa # do not use '~' in path
# Additional parameters for bwa specified as quoted string
bwa_args: "mem -t 1" 
bbmap_path: bbmap.sh # do not use '~' in path
# Additional parameters for bbmap specified as quoted string.
# nodisc option can be used in order to prevent genome index writing to working directory
bbmap_args: "threads=1" 

# read filtering
min_mapq: 20 # minimum mapping quality for mapped read retention
min_len: 20 # minimum alignment length for mapped read retention

# region calling
# tab-separated file with chromosomes and their sizes, can be generated with "faSize -detailed" from Kent utils
# only chromosomes listed in this file are processed in region calling
sizes_file: ../examples/canFam3.sizes 

### Pipeline step-by-step

# Step 1. fastq_clean.py - removes residual Illumina adapters and primers from input fastq files
# Output files: sample.ca.R1.fastq.gz [sample.ca.R2.fastq.gz] sample.ca.log

# Step 2. fastq_aln.py - aligns trimmed reads to target (tgt) and contamination (cnt) genomes using bowtie2, bwa or bbmap. Sorts and converts results to bam.
# Output files: sample.tgt.bam sample.tgt.log [sample.cnt.bam sample.cnt.log]

# Step 3. contam_filter.py - Removes contamination reads by comparing MAPQs to target and cotamination genomes. Outputs sorted and indexed bams.
# Output file: sample.tgt.filter.bam

# Step 4. bam_to_bed.py - creates bed file with non-overlapping positions of reads in target genome
# Input file to start from this step: sample.tgt.filter.bam
# Output file: sample.tgt.pos.bed

# Step 5. regions_dnacopy.R - classifies chromosomes listed in .sizes file based on distances between consecutive read positions
# Input file to start from this step: sample.tgt.pos.bed
# Output files: sample.tgt.reg.tsv sample.tgt.reg.pdf

# Step 6. sample_stats.py - collects statistics for the sample
# Output file: sample.stats.txt

### Other scripts

# You also can run pipeline for variant calling with GATK HaplotypeCaller and annotation with snpEff for these regions
# vca_reg.py vca_reg.yaml

# Input for RepeatExplorer (interleaved fasta with minimum read length 18 - word size) can be generated
# sample.[FR].ca.fastq files are used as input
# ../exec/fastq_repexpl.py [-r] sample

# Sample statistics can be updated for verified regions present on chromosomes
# ../exec/sample_stats.py -t verified_regs.bed -o sample.reg_stats.txt sample tgt
